version: '3'

services:

  cadvisor:
    image: gcr.io/cadvisor/cadvisor
    restart: always
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
    ports:
      - 8080:8080
    # networks:
    #   - back-tier
    # deploy:
    #   mode: global

# docker run \
#     -p 9090:9090 \
#     -v /path/to/prometheus.yml:/etc/prometheus/prometheus.yml \
#     prom/prometheus

  prometheus:
    image: prom/prometheus
    container_name: prometheus
    restart: unless-stopped
    ports:
      - 9090:9090
    volumes:
      - prometheus_data:/prometheus/
      - prometheus_etc:/etc/prometheus/
    links:
      - cadvisor:cadvisor
      # - alertmanager:alertmanager
      # - pushgateway:pushgateway
    depends_on:
      - cadvisor
#    - pushgateway
#   networks:
#    - back-tier
#    deploy:
#      placement:
#        constraints:
#          - node.hostname == ${HOSTNAME}

# docker run -d \
#   -p 9001:9001 \
#   --name portainer_agent \
#   --restart=always \
#   -v /var/run/docker.sock:/var/run/docker.sock \
#   -v /var/lib/docker/volumes:/var/lib/docker/volumes \
#   portainer/agent:2.18.4

  portainer_agent:
    image: portainer/agent:latest
    container_name: portainer_agent
    ports:
      - 9003:9001
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - /var/lib/docker/volumes:/var/lib/docker/volumes
    restart: unless-stopped

  portainer:
    image: portainer/portainer-ce:latest
    hostname: portainer.pyotrantropov.duckdns.org
    ports:
      - 9443:9443
      - 9002:9000
    volumes:
      - data_portainer:/data
      - /var/run/docker.sock:/var/run/docker.sock
    restart: unless-stopped

  minio:
    image: minio/minio:latest
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio_storage:/data
    environment:
      MINIO_ROOT_USER: masoud
      MINIO_ROOT_PASSWORD: Strong#Pass#2022
    command: server --console-address ":9001" /data

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    restart: unless-stopped
    ports:
      - '3000:3000'
    volumes:
      - grafana_data:/var/lib/grafana

  wordpress_db:
    # We use a mariadb image which supports both amd64 & arm64 architecture
    image: mariadb:latest
    # If you really want to use MySQL, uncomment the following line
    #image: mysql:8.0.27
    command: '--default-authentication-plugin=mysql_native_password'
    volumes:
      - db_data:/var/lib/mysql
    restart: always
    environment:
      - MYSQL_ROOT_PASSWORD=somewordpress
      - MYSQL_DATABASE=wordpress
      - MYSQL_USER=wordpress
      - MYSQL_PASSWORD=wordpress
    expose:
      - "3306"
      - "33060"

  wordpress:
    image: wordpress:latest
    ports:
      - "80"
    volumes:
      - wp_data:/var/www/html
    restart: always
    hostname: pyotrantropov.duckdns.org
    environment:
      - VIRTUAL_HOST=pyotrantropov.duckdns.org
      - LETSENCRYPT_HOST=pyotrantropov.duckdns.org
      - LETSENCRYPT_EMAIL=pyotr@pyotrantropov.duckdns.org
      - WORDPRESS_DB_HOST=wordpress_db
      - WORDPRESS_DB_USER=wordpress
      - WORDPRESS_DB_PASSWORD=wordpress
      - WORDPRESS_DB_NAME=wordpress

  # www:
  #   image: nginx:alpine
  #   container_name: nginx-www
  #   restart: always
  #   expose:
  #     - "80"
  #   volumes:
  #     - /mnt/Home/git/00-WebPyotrAntropov/www:/usr/share/nginx/html:ro
  #   environment:
  #     - VIRTUAL_HOST=pyotrantropov.duckdns.org
  #     - LETSENCRYPT_HOST=pyotrantropov.duckdns.org
  #     - LETSENCRYPT_EMAIL=pyotr@pyotrantropov.duckdns.org

  nginx-proxy:
    image: nginx:alpine
    container_name: nginx-proxy
    restart: always
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - conf:/etc/nginx/conf.d
      - vhost:/etc/nginx/vhost.d
      - html:/usr/share/nginx/html
      - certs:/etc/nginx/certs:ro

  docker-gen:
    image: nginxproxy/docker-gen
    container_name: nginx-proxy-gen
    restart: always
    command: -notify-sighup nginx-proxy -watch /etc/docker-gen/templates/nginx.tmpl /etc/nginx/conf.d/default.conf
    volumes_from:
      - nginx-proxy
    volumes:
      - ./nginx.tmpl:/etc/docker-gen/templates/nginx.tmpl:ro
      - /var/run/docker.sock:/tmp/docker.sock:ro
    labels:
      - "com.github.jrcs.letsencrypt_nginx_proxy_companion.docker_gen"

  acme-companion:
    image: nginxproxy/acme-companion
    container_name: nginx-proxy-acme
    restart: always
    environment:
      - DEFAULT_EMAIL=pyotrantropov.duckdns.org
    volumes_from:
      - nginx-proxy
    volumes:
      - certs:/etc/nginx/certs:rw
      - acme:/etc/acme.sh
      - /var/run/docker.sock:/var/run/docker.sock:ro

volumes:
  conf:
  vhost:
  html:
  certs:
  acme:
  wp_data:
  db_data:
  grafana_data:
  minio_storage:
  data_portainer:
  prometheus_data:
  prometheus_etc:

